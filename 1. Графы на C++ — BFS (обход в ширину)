#include <iostream>     // библиотека для ввода-вывода
#include <vector>       // библиотека для работы с динамическими массивами (вектор)
#include <queue>        // библиотека для очереди (нужна для BFS)
using namespace std;    // чтобы не писать std:: перед объектами

class Graph {                 // создаём класс "Граф"
    int V;                    // количество вершин
    vector<vector<int>> adj;  // список смежности (для хранения рёбер)
public:
    Graph(int v) : V(v), adj(v) {}  // конструктор, инициализация графа с V вершинами

    void addEdge(int u, int v) {    // метод добавления ребра
        adj[u].push_back(v);        // добавляем связь u → v
        adj[v].push_back(u);        // добавляем обратную связь v → u (неориентированный граф)
    }

    void BFS(int start) {                  // метод обхода графа в ширину
        vector<bool> visited(V, false);    // массив посещённых вершин (изначально false)
        queue<int> q;                      // очередь для BFS
        visited[start] = true;             // помечаем стартовую вершину как посещённую
        q.push(start);                     // добавляем её в очередь

        while (!q.empty()) {               // пока очередь не пуста
            int node = q.front();          // берём первый элемент из очереди
            q.pop();                       // удаляем его из очереди
            cout << node << " ";           // выводим вершину

            for (int neigh : adj[node]) {  // перебираем всех соседей вершины
                if (!visited[neigh]) {     // если сосед ещё не посещён
                    visited[neigh] = true; // отмечаем как посещённый
                    q.push(neigh);         // добавляем соседа в очередь
                }
            }
        }
    }
};

int main() {
    Graph g(5);             // создаём граф с 5 вершинами (0..4)
    g.addEdge(0,1);         // добавляем ребро 0–1
    g.addEdge(0,2);         // добавляем ребро 0–2
    g.addEdge(1,3);         // добавляем ребро 1–3
    g.addEdge(2,4);         // добавляем ребро 2–4

    cout << "BFS начиная с вершины 0: ";  // выводим текст
    g.BFS(0);            // запускаем BFS с вершины 0
    return 0;             // завершение программы
}
