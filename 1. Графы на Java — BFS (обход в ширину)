import java.util.*;   // подключаем коллекции (LinkedList, Queue и т.д.)

class Graph {
    private int V;                      // количество вершин
    private LinkedList<Integer>[] adj;  // список смежности

    Graph(int v) {                      // конструктор графа
        V = v;
        adj = new LinkedList[v];        // создаём массив списков
        for (int i = 0; i < v; i++)     // инициализируем списки
            adj[i] = new LinkedList<>();
    }

    void addEdge(int u, int v) {   // метод добавления ребра
        adj[u].add(v);             // u → v
        adj[v].add(u);             // v → u (неориентированный граф)
    }

    void BFS(int start) {                  // метод обхода в ширину
        boolean[] visited = new boolean[V]; // массив посещённых вершин
        Queue<Integer> queue = new LinkedList<>(); // очередь
        visited[start] = true;             // отмечаем начальную вершину
        queue.add(start);                  // добавляем в очередь

        while (!queue.isEmpty()) {         // пока очередь не пуста
            int node = queue.poll();       // достаём вершину
            System.out.print(node + " ");  // выводим её
            for (int neigh : adj[node]) {  // перебираем соседей
                if (!visited[neigh]) {     // если сосед не посещён
                    visited[neigh] = true; // отмечаем
                    queue.add(neigh);      // добавляем в очередь
                }
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Graph g = new Graph(5);   // создаём граф с 5 вершинами
        g.addEdge(0,1);           // добавляем ребро 0–1
        g.addEdge(0,2);           // добавляем ребро 0–2
        g.addEdge(1,3);           // добавляем ребро 1–3
        g.addEdge(2,4);           // добавляем ребро 2–4

        System.out.print("BFS начиная с вершины 0: "); // вывод
        g.BFS(0);  // запускаем BFS с вершины 0
    }
}
