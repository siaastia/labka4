#include <iostream>     // библиотека ввода-вывода
#include <vector>       // библиотека для работы с вектором
using namespace std;    // используем стандартное пространство имён

class Graph {                 // класс "Граф"
    int V;                    // количество вершин
    vector<vector<int>> adj;  // список смежности

    void DFSUtil(int v, vector<bool>& visited) {  // вспомогательная рекурсивная функция DFS
        visited[v] = true;      // помечаем вершину как посещённую
        cout << v << " ";       // выводим её
        for (int neigh : adj[v]) {   // перебираем всех соседей
            if (!visited[neigh])     // если сосед ещё не посещён
                DFSUtil(neigh, visited); // вызываем DFS для соседа
        }
    }

public:
    Graph(int v) : V(v), adj(v) {}  // конструктор графа

    void addEdge(int u, int v) {    // метод добавления ребра
        adj[u].push_back(v);        // u → v
        adj[v].push_back(u);        // v → u (неориентированный граф)
    }

    void DFS(int start) {           // запуск обхода в глубину
        vector<bool> visited(V, false);  // массив посещённых вершин
        DFSUtil(start, visited);         // вызов рекурсивной функции
    }
};

int main() {
    Graph g(5);            // создаём граф с 5 вершинами
    g.addEdge(0,1);        // добавляем ребро 0–1
    g.addEdge(0,2);        // добавляем ребро 0–2
    g.addEdge(1,3);        // добавляем ребро 1–3
    g.addEdge(2,4);        // добавляем ребро 2–4

    cout << "DFS начиная с вершины 0: ";  // сообщение
    g.DFS(0);          // запуск DFS с вершины 0
    return 0;          // конец программы
}
